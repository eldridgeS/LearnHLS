#include "ap_fixed.h" // library for fixed point data types

typedef ap_fixed<16, 8> fixed_digit; //define our numbers to have 16 total bits, 8 for integers

//Define Matrix dimensions [X*Y] [Y*Z]
#define X 4
#define Y 4
#define Z 4

// Top function definition
void matrix_mult(fixed_digit A[X][Y], fixed_digit B[Y][Z], fixed_digit C[X][Z]){

//Breaks the arrays into single BRAMs so every digit can be accessed in single clock cycle>>>>>>>>>>>
//	#pragma HLS ARRAY_PARTITION variable=A complete dim=1
//	#pragma HLS ARRAY_PARTITION variable=A complete dim=2
//	#pragma HLS ARRAY_PARTITION variable=B complete dim=1
//	#pragma HLS ARRAY_PARTITION variable=B complete dim=2
//	#pragma HLS ARRAY_PARTITION variable=C complete dim=1
//	#pragma HLS ARRAY_PARTITION variable=C complete dim=2

	row_loop: for (int i = 0; i < X; i++) {

		col_loop: for (int j = 0; j < Z; j++) {
			fixed_digit sum = 0;

			product_loop: for (int k = 0; k < Y; k++) {
//				#pragma HLS pipeline II=1 //product iteration starts every cycle>>>>>>>>>>>>>>>>>>>>>>>>>

				sum += A[i][k] * B[k][j];
			}
			C[i][j] = sum;
 		}
	}
}
